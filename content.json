{"meta":{"title":"Chen's Blog","subtitle":null,"description":null,"author":"Yiheng Chen","url":"https://winnerchen.github.io"},"pages":[],"posts":[{"title":"搬瓦工+ss+fs搭建自己的翻墙神器","slug":"搬瓦工-ss-fs搭建自己的私人服务器","date":"2017-08-09T08:49:17.000Z","updated":"2017-08-09T12:03:41.895Z","comments":true,"path":"2017/08/09/搬瓦工-ss-fs搭建自己的私人服务器/","link":"","permalink":"https://winnerchen.github.io/2017/08/09/搬瓦工-ss-fs搭建自己的私人服务器/","excerpt":"前言作为一个经常上谷歌，YouTube的程序狗，不能自由的访问网络实在是让我很心烦，以前我都是买网上的vpn服务，但是由于不知名的原因，那个网站被封掉了… 购买vpn服务其实也有很多的弊端，例如数据有泄漏的隐患、网络高峰期速度会比较慢，还有就是vpn的费用比起整年购买的vps服务也是贵了不少。 前两天有一个哥们推荐了这么一个翻墙的神技，根据相应的关键字我百度了一番教程之后，终于被我摸索出一套可行的方案。下面是很详细的教程，希望新手们在走完教程后能享受到自由无限制的网络:)","text":"前言作为一个经常上谷歌，YouTube的程序狗，不能自由的访问网络实在是让我很心烦，以前我都是买网上的vpn服务，但是由于不知名的原因，那个网站被封掉了… 购买vpn服务其实也有很多的弊端，例如数据有泄漏的隐患、网络高峰期速度会比较慢，还有就是vpn的费用比起整年购买的vps服务也是贵了不少。 前两天有一个哥们推荐了这么一个翻墙的神技，根据相应的关键字我百度了一番教程之后，终于被我摸索出一套可行的方案。下面是很详细的教程，希望新手们在走完教程后能享受到自由无限制的网络:) 1.搬瓦工1.1注册·传送门：https://bwh1.net/register.php 需要提一句的是，在注册的时候，如果是国内的网络会显示不出验证码。不过相信这种问题一定难不倒机智的你。 1.2 购买服务作为个人用户，我推荐大家还是买第一个服务即可，不做为商业服务器部署项目的话，每个月的500个G的流量是非常够用的。一年下来大概36美金。 1.3 服务管理根据下图即可跳转到管理界面 主管理界面：注意这里记录了你的ip地址和端口号，之后FS和SS的客户端会需要这些数据。 2. ShadowSocks2.1 配置服务器端SS服务器端的配置非常简单，因为搬瓦工已经帮我们一键集成了，我们需要做的就是开启这个服务。具体流程参考下图。 在屏幕的左边点击Shadowsocks Server，第一次进入会提示你未开启该服务，是否需要现在开启。直接点激活即可。 激活完毕之后就会跳转到这个界面，SS服务器端口号和密码需要记录下来，客户端需要使用。 2.2 配置客户端推荐使用版本：2.5.8根据上图配置SS客户端的ip地址，端口号。密码从搬瓦工网上复制下来。端口号2000是本地端口，用于加速使用，可以随意填写。 3. FinalSpeed3.1 配置服务器端打开搬瓦工的linux命令行，点击右边导航栏的Root-shell basic进入。在命令行中依次输入：1yum -y install wget 1wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/finalspeed/master/install_fs.sh &amp;&amp; bash install_fs.sh 顺利安装好FS的服务端之后即可输入启动命令来启动FS服务1/etc/init.d/finalspeed start FS相关命令停止FS服务端：1/etc/init.d/finalspeed stop 查看FS运行状态1/etc/init.d/finalspeed status 3.2 配置客户端推荐版本：FinalSpeed1.2详细配置参见下图如果连接成功会提示已成功连接 如果一切顺利，至此一切配置都已配完，是时候享受自由无限制的网络了！","categories":[],"tags":[]},{"title":"IDEA5分钟，Eclipse2小时","slug":"IDEA5分钟，Eclipse2小时","date":"2017-08-06T13:30:51.000Z","updated":"2017-08-06T13:35:13.902Z","comments":true,"path":"2017/08/06/IDEA5分钟，Eclipse2小时/","link":"","permalink":"https://winnerchen.github.io/2017/08/06/IDEA5分钟，Eclipse2小时/","excerpt":"IDEA概述1.1 Java开发人员常用IDE1.1.1 什么是IDEIDE（Integrated [ˈɪntɪgreɪtɪd] Development Environment）-集成开发环境。是用于提供程序开发环境的应用程序，一般包括代码编辑器，编译器，调试器和图形用户操作等工具。 —-来源于百度百科 1.1.2 Java开发人员常用IDEEclipse,MyEclipse, IntelliJ IDEA","text":"IDEA概述1.1 Java开发人员常用IDE1.1.1 什么是IDEIDE（Integrated [ˈɪntɪgreɪtɪd] Development Environment）-集成开发环境。是用于提供程序开发环境的应用程序，一般包括代码编辑器，编译器，调试器和图形用户操作等工具。 —-来源于百度百科 1.1.2 Java开发人员常用IDEEclipse,MyEclipse, IntelliJ IDEA 1.2、IDEA简介IDEA 全称IntelliJ IDEA，是java语言开发的集成环境。IDEA是JetBrains公司的产品。IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查方面。 了解：JetBrains公司开发的所有工具。 1.3、IDEA与Eclipse","categories":[],"tags":[]},{"title":"Git:从零开始","slug":"Git-从零开始","date":"2017-08-06T12:27:00.000Z","updated":"2017-08-06T13:25:47.439Z","comments":true,"path":"2017/08/06/Git-从零开始/","link":"","permalink":"https://winnerchen.github.io/2017/08/06/Git-从零开始/","excerpt":"初识GitHub1. 什么是GitHubGitHub是一个面向开源及私有软件项目的托管平台,它只支持git这一种版本管理技术,故名GitHub。对于大部分用户来说，GitHub是一个托管代码的地方，用于备份其本地仓库的代码。 2.GitHub和Git的区别本人刚开始学习编程的时候也分不清两者的区别，以为GitHub就是Git，但是它们其实是有本质上的区别的。","text":"初识GitHub1. 什么是GitHubGitHub是一个面向开源及私有软件项目的托管平台,它只支持git这一种版本管理技术,故名GitHub。对于大部分用户来说，GitHub是一个托管代码的地方，用于备份其本地仓库的代码。 2.GitHub和Git的区别本人刚开始学习编程的时候也分不清两者的区别，以为GitHub就是Git，但是它们其实是有本质上的区别的。 Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git是大名鼎鼎的Linux发明者Linus Torvalds 开发的。不管是想要学习GitHub，还是从事编程相关行业的工作，git都是一门必须要学习的技术，所以从现在开始学习和了解git技术吧！ 而GitHub已经在上面介绍过了，是一个基于git技术的版本托管平台。所以Git知识GitHub上面用来管理项目的一个工具而已，而GitHub的功能则远比这个强大。 3. GitHub 有什么用 学习优秀的开源项目 开源社区一直有一句流行的话叫「不要重复发明轮子」，某种意义上正是因为开源社区的贡献，我们的软件开发才能变得越来越容易，越来越快速。试想你在做项目时，如果每一模块都要自己去写，如网络库、图片加载库、ORM库等等，自己写的好不好是一回事，时间与资源是很大的成本。对于大公司可能会有人力与资源去发明一套自己的轮子，但是对于大部分互联网创业公司来说时间就是一切。而且你在使用开源项目的过程也可以学习他们优秀的设计思想、实现方式，这是最好的学习资料，也是一份提升自己能力的绝佳方式！ 多人协作 如果你想发起一个项目，比如翻译一份不错的英文文档，觉得一个人的精力不够，所以你需要更多的人参与进来，这时候 GitHub是你的最佳选择，感兴趣的人可以参与进来，利用业余时间对这个项目做贡献，然后可以互相审核、合并，简直不要太棒！ 搭建博客、个人网站或者公司官网 这个就不用多说了，现在越来越多的博客都是基于 GitHub Pages来搭建的了，你可以随心所欲的定制自己的样式，可以给你博客买个逼格高的域名，再也不用忍受各大博客网站的约束与各式各样的广告了！ 写作 如果你喜欢写作，而且基于 Markdown， 并准备出版书籍，那么推荐你用 Gitbook ，技术写作人的最爱！ 个人简历 如果你有一个活跃的 GitHub账号，上面有自己不错的开源项目，还经常给别的开源项目提问题，push 代码，那么你找工作将是一个非常大的优势，现在程序员的招聘很多公司都很看中你 GitHub 账号，某种意义上 GitHub就可以算是你的简历了。而且不仅国内，很多国外的科技公司都会通过 GitHub 来寻找优秀的人才。 GIT快速入门关于GitHub的介绍就到这里了，本篇文章的目的是让读者能快速入门Git，运用Git命令行操作本地仓库，并同步到远程仓库。下文会先介绍一些最基本的Git知识和常用的Git操作。 1. 什么是Git上文说了，Git是一款新时代的版本控制工具，那么版本控制到底是什么意思呢？如何去理解版本控制工具呢？下面几个例子大家可以思考一下。 在软件开发中，源代码是最重要的，那么对于源代码的管理也就非常重要： 比如为了防止代码的丢失，肯定本地机器与远程服务器都要存放一份，而且还需要有一套机制让本地可以跟远程同步； 又比如我们经常是好几个人做同一个项目，都要对一份代码做更改，这个时候需要大家互不影响，又需要各自可以同步别人的代码； 又比如我们开发的时候免不了有bug，有时候刚发布的功能就出现了严重的bug，这个时候需要紧急对代码进行还原； 又比如随着我们版本迭代的功能越来越多，但是我们需要清楚的知道历史每一个版本的代码更改记录，甚至知道每个人历史提交代码的情况； 等等等类似以上的情况，这些都是版本控制系统能解决的问题。所以说，版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统，对于软件开发领域来说版本控制是最重要的一环，而 Git 毫无疑问是当下最流行、最好用的版本控制系统。 2. Git安装上面说了，Git 是一个版本控制系统，你也可以理解成是一个工具，跟 Java 类似，使用之前必须得先下载安装，所以第一步必须要安装，我用的是 Mac ， Mac 上其实系统自带 Git 的，不过这里统一提供一下各平台的安装方式，这部分就不过多介绍，相信大家这里搞的定。 Mac：https://sourceforge.net/projects/git-osx-installer/ Windows：https://git-for-windows.github.io/ Linux：apt-get install git","categories":[],"tags":[]},{"title":"Markdown基础教程","slug":"Markdown基础教程","date":"2017-08-06T09:39:48.000Z","updated":"2017-08-06T12:49:46.496Z","comments":true,"path":"2017/08/06/Markdown基础教程/","link":"","permalink":"https://winnerchen.github.io/2017/08/06/Markdown基础教程/","excerpt":"1. 标题为了获得上面的 “1. 标题”， 在 Markdown 编辑器里输入： 1# 1. 标题 “#” 后最好加个空格。除此之外，还有 5 级标题，依次有不同的字体大小，即 12345## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 这样就有：","text":"1. 标题为了获得上面的 “1. 标题”， 在 Markdown 编辑器里输入： 1# 1. 标题 “#” 后最好加个空格。除此之外，还有 5 级标题，依次有不同的字体大小，即 12345## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 这样就有： 二级标题三级标题四级标题五级标题六级标题 2. 加粗，斜体最常用的强调方式，那就是 加粗 了，你得这样： 1最常用的强调方式，那就是 **加粗** 了，你得这样： 通常我喜欢在 “**加粗的部分**” 旁边各加一个空格，当然你也可以不这样。斜体则多用在于书名，比如：我从来没看过 Jane Eyre 1斜体则多用在于书名，比如：我从来没看过 *Jane Eyre* 但中文的斜体我觉得真是不美，像：《简 · 爱》，一般还是别用了。 3. 层次比如写个读书笔记，你得 第一章 第一节 第二节(你不用敲 “2”，自动就有了） 第一小节（推荐每层次缩进四个空格） 小小节 1 小小节 2 第二小节 也不难： 12345678#### 第一章1. 第一节* 第二节(你不用敲 &quot;2&quot;，自动就有了） * 第一小节（推荐每层次缩进四个空格） * 小小节 1 * 小小节 2 * 第二小节 “*” 后面要加空格，这是必须的，除了 *，还可以使用 + 或者 -。 如果格式出现问题，多加个空行，一般就好了。 4. 链接，图片你：我没读过 Jane Eyre我：以后别跟我说话！你：。。。我：我也没读过，但是， Jane Eyre is not just Jane Eyre 12我：我也没读过，但是， [***Jane Eyre***](http://book.douban.com/subject/1141406/) is not just ***Jane Eyre***![](http://img3.douban.com/mpic/s1108264.jpg) 5. 其他你可能还没注意到本文每部分之间的分割线和 其他 的链接其实没有链接我爱 分割线， 我爱 链接，哪怕它只有颜色~ 12345678---# [5. 其他][null-link]你可能还没注意到本文每部分之间的分割线和 `其他` 的链接其实没有链接我爱 `分割线`， 我爱 [**链接**][null-link]，哪怕它只有颜色~[null-link]: chrome://not-a-link “---” 的上下最好各空一行 P.S. 补充一种高端的链接: 鼠标移过来，先别单击 ~ 代码如下： 12**P.S.** 补充一种高端的链接: [鼠标移过来，**先别单击** ~][hover][hover]: http://www.google.com.sg &quot;Google Sg 更快，更好用。好，现在单击吧&quot; （可惜 Google 被墙了） P.P.S. 图片链接：(点击图片可跳转） 代码如下：123[![][jane-eyre-pic]][jane-eyre-douban][jane-eyre-pic]: http://img3.douban.com/mpic/s1108264.jpg[jane-eyre-douban]: http://book.douban.com/subject/1141406/ 作者：Gnat","categories":[],"tags":[]},{"title":"Hello Hexo","slug":"Hello-Hexo","date":"2017-08-06T07:58:32.000Z","updated":"2017-08-06T07:59:47.376Z","comments":true,"path":"2017/08/06/Hello-Hexo/","link":"","permalink":"https://winnerchen.github.io/2017/08/06/Hello-Hexo/","excerpt":"","text":"HelloThis is my first article:)","categories":[],"tags":[]}]}